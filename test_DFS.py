import unittest
import depth_first_search

class Test_dfs(unittest.TestCase):

    def test_A(self):
        #граф
        graph = {
                0: [1, 7],
                1: [0, 2, 7],
                2: [1, 3, 7],
                3: [2, 6, 8],
                4: [5, 6],
                5: [4],
                6: [3, 4, 7],
                7: [0, 1, 2, 6],
                8: [3],
            }

        # ОБХОД С ПЕРВОЙ ВЕРШИНЫ
        # последовательность обхода вершин (правильный ответ)
        result1 = [1, 2, 3, 4, 7, 5, 6, 8, 9]
        # матрица смежности остовного графа (правильный ответ)
        result2 =  [[0, 1, 0, 0, 0, 0, 0, 0, 0], 
                    [1, 0, 1, 0, 0, 0, 0, 0, 0], 
                    [0, 1, 0, 1, 0, 0, 0, 0, 0], 
                    [0, 0, 1, 0, 0, 0, 1, 0, 1], 
                    [0, 0, 0, 0, 0, 1, 1, 0, 0], 
                    [0, 0, 0, 0, 1, 0, 0, 0, 0], 
                    [0, 0, 0, 1, 1, 0, 0, 1, 0], 
                    [0, 0, 0, 0, 0, 0, 1, 0, 0], 
                    [0, 0, 0, 1, 0, 0, 0, 0, 0]]

        # проверяем последовательность вершин
        self.assertEqual(depth_first_search.DFS(graph, 0)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 0)["matrix"], result2)

        # ОБХОД СО ВТОРОЙ ВЕРШИНЫ
        # последовательность обхода вершин (правильный ответ)
        result1 = [2, 1, 8, 3, 4, 7, 5, 6, 9]
        # матрица смежности остовного графа (правильный ответ)
        result2 =  [[0, 1, 0, 0, 0, 0, 0, 1, 0], 
                    [1, 0, 0, 0, 0, 0, 0, 0, 0], 
                    [0, 0, 0, 1, 0, 0, 0, 1, 0], 
                    [0, 0, 1, 0, 0, 0, 1, 0, 1], 
                    [0, 0, 0, 0, 0, 1, 1, 0, 0], 
                    [0, 0, 0, 0, 1, 0, 0, 0, 0], 
                    [0, 0, 0, 1, 1, 0, 0, 0, 0], 
                    [1, 0, 1, 0, 0, 0, 0, 0, 0], 
                    [0, 0, 0, 1, 0, 0, 0, 0, 0]]

        # проверяем последовательность вершин
        self.assertEqual(depth_first_search.DFS(graph, 1)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 1)["matrix"], result2)

        # ОБХОД С ТРЕТЬЕЙ ВЕРШИНЫ
        result1 = [3, 2, 1, 8, 7, 4, 9, 5, 6]
        result2 =  [[0, 1, 0, 0, 0, 0, 0, 1, 0],
                    [1, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0, 1],
                    [0, 0, 0, 0, 0, 1, 1, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 1, 0],
                    [1, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0]]
        
        # проверяем последовательность вершин
        self.assertEqual(depth_first_search.DFS(graph, 2)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 2)["matrix"], result2)

        # ОБХОД С ЧЕТВЕРТОЙ ВЕРШИНЫ
        result1 = [4, 3, 2, 1, 8, 7, 5, 6, 9]
        result2 =  [[0, 1, 0, 0, 0, 0, 0, 1, 0],
                    [1, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 1, 1, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 1, 0],
                    [1, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0]]
        
        # проверяем последовательность вершин
        self.assertEqual(depth_first_search.DFS(graph, 3)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 3)["matrix"], result2)

        # ОБХОД С ПЯТОЙ ВЕРШИНЫ
        result1 = [5, 6, 7, 4, 3, 2, 1, 8, 9]
        result2 =  [[0, 1, 0, 0, 0, 0, 0, 1, 0],
                    [1, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 1, 0, 1],
                    [0, 0, 0, 0, 0, 1, 1, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0]]
        
        # проверяем последовательность вершин
        self.assertEqual(depth_first_search.DFS(graph, 4)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 4)["matrix"], result2)

        #ОБХОД С ШЕСТОЙ ВЕРШИНЫ
        # последовательность обхода вершин (правильный ответ)
        result1 = [6, 5, 7, 4, 3, 2, 1, 8, 9]
        # матрица смежности остовного графа (правильный ответ)
        result2 =   [[0, 1, 0, 0, 0, 0, 0, 1, 0], 
                     [1, 0, 1, 0, 0, 0, 0, 0, 0], 
                     [0, 1, 0, 1, 0, 0, 0, 0, 0], 
                     [0, 0, 1, 0, 0, 0, 1, 0, 1], 
                     [0, 0, 0, 0, 0, 1, 1, 0, 0], 
                     [0, 0, 0, 0, 1, 0, 0, 0, 0], 
                     [0, 0, 0, 1, 1, 0, 0, 0, 0], 
                     [1, 0, 0, 0, 0, 0, 0, 0, 0], 
                     [0, 0, 0, 1, 0, 0, 0, 0, 0]]

        # проверяем последовательность вершин
        self.assertEqual(depth_first_search.DFS(graph, 5)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 5)["matrix"], result2)

        # ОБХОД С СЕДЬМОЙ ВЕРШИНЫ
        result1 = [7, 4, 3, 2, 1, 8, 9, 5, 6]
        result2 =  [[0, 1, 0, 0, 0, 0, 0, 1, 0],
                    [1, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 1, 0, 1],
                    [0, 0, 0, 0, 0, 1, 1, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0]]
        
        # проверяем последовательность вершин
        self.assertEqual(depth_first_search.DFS(graph, 6)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 6)["matrix"], result2)

        # ОБХОД С ВОСЬМОЙ ВЕРШИНЫ
        result1 = [8, 1, 2, 3, 4, 7, 5, 6, 9]
        result2 =  [[0, 1, 0, 0, 0, 0, 0, 1, 0],
                    [1, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 1, 0, 1],
                    [0, 0, 0, 0, 0, 1, 1, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0]]
        
        # проверяем последовательность вершин
        self.assertEqual(depth_first_search.DFS(graph, 7)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 7)["matrix"], result2)

        # ОБХОД С ДЕВЯТОЙ ВЕРШИНЫ
        result1 = [9, 4, 3, 2, 1, 8, 7, 5, 6]
        result2 =  [[0, 1, 0, 0, 0, 0, 0, 1, 0],
                    [1, 0, 1, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 1, 1, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 1, 0],
                    [1, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 0, 0]]
        
        # проверяем последовательность вершин
        self.assertEqual(depth_first_search.DFS(graph, 8)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 8)["matrix"], result2)

    def test_B(self):
        graph = {
                0: [5, 7],
                1: [5, 7],
                2: [5, 6, 7],
                3: [5, 6, 7],
                4: [7],
                5: [0, 1, 2, 3],
                6: [2, 3],
                7: [0, 1, 2, 3, 4]
            }

        #ОБХОД С ВЕРШИНЫ 1
        # последовательность обхода вершин
        result1 = [1, 6, 2, 8, 3, 7, 4, 5]
        # матрица смежности остовного графа (правильный ответ)
        result2 =   [[0, 0, 0, 0, 0, 1, 0, 0], 
                     [0, 0, 0, 0, 0, 1, 0, 1], 
                     [0, 0, 0, 0, 0, 0, 1, 1], 
                     [0, 0, 0, 0, 0, 0, 1, 0], 
                     [0, 0, 0, 0, 0, 0, 0, 1], 
                     [1, 1, 0, 0, 0, 0, 0, 0], 
                     [0, 0, 1, 1, 0, 0, 0, 0], 
                     [0, 1, 1, 0, 1, 0, 0, 0]]

        # проверяем последовательность
        self.assertEqual(depth_first_search.DFS(graph, 0)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 0)["matrix"], result2)

        #ОБХОД С ВЕРШИНЫ 2
        # последовательность обхода вершин
        result1 = [2, 6, 1, 8, 3, 7, 4, 5] 
        # матрица смежности остовного графа (правильный ответ)
        result2 =   [[0, 0, 0, 0, 0, 1, 0, 1], 
                     [0, 0, 0, 0, 0, 1, 0, 0],
                     [0, 0, 0, 0, 0, 0, 1, 1], 
                     [0, 0, 0, 0, 0, 0, 1, 0], 
                     [0, 0, 0, 0, 0, 0, 0, 1], 
                     [1, 1, 0, 0, 0, 0, 0, 0], 
                     [0, 0, 1, 1, 0, 0, 0, 0], 
                     [1, 0, 1, 0, 1, 0, 0, 0]]

        # проверяем последовательность
        self.assertEqual(depth_first_search.DFS(graph, 1)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 1)["matrix"], result2)

        #ОБХОД С ВЕРШИНЫ 3
        # последовательность обхода вершин
        result1 = [3, 6, 1, 8, 2, 4, 7, 5] 
        # матрица смежности остовного графа (правильный ответ)
        result2 =   [[0, 0, 0, 0, 0, 1, 0, 1], 
                     [0, 0, 0, 0, 0, 0, 0, 1], 
                     [0, 0, 0, 0, 0, 1, 0, 0], 
                     [0, 0, 0, 0, 0, 0, 1, 1], 
                     [0, 0, 0, 0, 0, 0, 0, 1], 
                     [1, 0, 1, 0, 0, 0, 0, 0], 
                     [0, 0, 0, 1, 0, 0, 0, 0], 
                     [1, 1, 0, 1, 1, 0, 0, 0]]

        # проверяем последовательность
        self.assertEqual(depth_first_search.DFS(graph, 2)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 2)["matrix"], result2)

        #ОБХОД С ВЕРШИНЫ 4
        # последовательность обхода вершин
        result1 = [4, 6, 1, 8, 2, 3, 7, 5] 
        # матрица смежности остовного графа (правильный ответ)
        result2 =   [[0, 0, 0, 0, 0, 1, 0, 1], 
                     [0, 0, 0, 0, 0, 0, 0, 1], 
                     [0, 0, 0, 0, 0, 0, 1, 1], 
                     [0, 0, 0, 0, 0, 1, 0, 0], 
                     [0, 0, 0, 0, 0, 0, 0, 1], 
                     [1, 0, 0, 1, 0, 0, 0, 0], 
                     [0, 0, 1, 0, 0, 0, 0, 0], 
                     [1, 1, 1, 0, 1, 0, 0, 0]]

        # проверяем последовательность
        self.assertEqual(depth_first_search.DFS(graph, 3)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 3)["matrix"], result2)

        #ОБХОД С ВЕРШИНЫ 5
        # последовательность обхода вершин
        result1 = [5, 8, 1, 6, 2, 3, 7, 4]
        # матрица смежности остовного графа (правильный ответ)
        result2 =   [[0, 0, 0, 0, 0, 1, 0, 1],
                    [0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1],
                    [1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 1, 0, 0, 0]]

        # проверяем последовательность
        self.assertEqual(depth_first_search.DFS(graph, 4)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 4)["matrix"], result2)

        #ОБХОД С ВЕРШИНЫ 6
        # последовательность обхода вершин
        result1 = [6, 1, 8, 2, 3, 7, 4, 5]
        # матрица смежности остовного графа (правильный ответ)
        result2 =   [[0, 0, 0, 0, 0, 1, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 0, 1, 1],
                    [0, 0, 0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1],
                    [1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 0, 0, 0, 0],
                    [1, 1, 1, 0, 1, 0, 0, 0]]

        # проверяем последовательность
        self.assertEqual(depth_first_search.DFS(graph, 5)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 5)["matrix"], result2)
        
        #ОБХОД С ВЕРШИНЫ 7
        # последовательность обхода вершин
        result1 = [7, 3, 6, 1, 8, 2, 4, 5]
        # матрица смежности остовного графа (правильный ответ)
        result2 =   [[0, 0, 0, 0, 0, 1, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 1],
                    [1, 0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0],
                    [1, 1, 0, 1, 1, 0, 0, 0]]

        # проверяем последовательность
        self.assertEqual(depth_first_search.DFS(graph, 6)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 6)["matrix"], result2)

        #ОБХОД С ВЕРШИНЫ 8
        # последовательность обхода вершин
        result1 = [8, 1, 6, 2, 3, 7, 4, 5]
        # матрица смежности остовного графа (правильный ответ)
        result2 =   [[0, 0, 0, 0, 0, 1, 0, 1],
                    [0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1],
                    [1, 1, 1, 0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 1, 0, 0, 0]]

        # проверяем последовательность
        self.assertEqual(depth_first_search.DFS(graph, 7)["sequence"], result1)
        # проверяем матрицу
        self.assertEqual(depth_first_search.DFS(graph, 7)["matrix"], result2)

if __name__ == '__main__':
    unittest.main()
    